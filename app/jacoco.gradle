apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = false
        html.enabled = true
    }

//    def fileFilter = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            '**/*$ViewInjector*.*',
//            '**/*$ViewBinder*.*',
//            '**/*$Lambda$*.*',
//            '**/*Module.*',
//            '**/*Dagger*.*',
//            '**/*MembersInjector*.*',
//            '**/*_Provide*Factory*.*',
//            '**/*_Factory.*',
//            '**/*$*$*.*',
//            'android/**/*.*',
//            'com/**/*.*',
//            'uk/**/*.*',
//            'io/**/*.*',
//            'androidTest/**/*.*',
//            'test/**/*.*',
//            '**/injector/**/*.*',
//            '**/model/**/*.*',
//            '**/mock/**/*.*',
//            '**/event/**/*.*',
//            '**/**_ViewBinding**',
//            '**/*EventType.*',
//            '**/**Mocked'
//    ]

//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
//                      'android/**/*.*', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
//                      '**/*Test*.*', 'android/**/*.*']

    def fileFilter = ['android/**/*.*']

    //def debugTree = fileTree(dir: "$project.buildDir/intermediates/app_classes/debug/bundleDebugClasses", excludes: fileFilter)
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = ["$project.projectDir/src/main/java"]

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/**/*coverage.ec"
    ]))

    //FOR Old versions of Gradle
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: project.buildDir, includes: [
//            "jacoco/testDebugUnitTest.exec", 'outputs/code-coverage/connected/*coverage.ec'
//    ])

    doLast {
        println "Jacoco report has been generated to file://${reports.html.destination}/index.html"
    }
}
